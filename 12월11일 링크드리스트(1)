#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#include <stdlib.h>

typedef struct node* list_pointer;

typedef struct node {

	int data;

	list_pointer link;//포인터변수

} Node;
//구조체만들기, 
list_pointer make_list(int n) {//리스트 이름=메이크리스트

	list_pointer rear = (list_pointer)malloc(sizeof(Node));
	//리얼 포인터 만들면서 공간할당하고 그 공간을 리어가 가리키도록함
	list_pointer front = rear;
	//프론트가 같이 공간을 가리키고있음
	
	// check용 배열 0으로 초기화

	int* check_array = (int*)malloc(sizeof(int) * n);//난수로 넣을 거임-근데 난수는 중복될 수 있으므로 중복없이 뽑을거임.
	//
	for (int i = 0; i < n; i++) check_array[i] = 0;
	//배열의 각 원소를 0으로 채움


	// 난수 생성(중복 허용 x)

	for (int i = 0; i < n; i++) {//엔 -1까지 돌아감 

		int temp = rand() % n;

		// 중복 체크

		if (check_array[temp] == 1) {

			i--;//뽑은 수가 1이면  i를 줄이고 다시 수를 뽑음

			continue;

		}
		
		else check_array[temp] = 1;

		// 큐 방식으로 데이터 입력

		list_pointer temp_node = (list_pointer)malloc(sizeof(Node));//공간만들고 할당

		temp_node->data = temp;

		temp_node->link = NULL;

		rear->link = temp_node;//리어가 가리키는 링크를 새로이만든 공간을 가리키도록 해라

		rear = rear->link;//

	}

	return front->link;
	//
}

list_pointer invert(list_pointer head) {//만든 리스트를 가져옴

	list_pointer middle, trail;

	middle = NULL;
	
	while (head) {

		trail = middle;

		middle = head;

		head = head->link;

		middle->link = trail;

	}

	return middle;

}

list_pointer concatenate(list_pointer ptr1, list_pointer ptr2) {

	list_pointer temp;

	if (!ptr1) return ptr2;//존재여부를 묻고있음

	if (!ptr2) return ptr1;//"

	for (temp = ptr1; temp->link; temp = temp->link);
	//temp->link 는 템프의 링크가 가리기는 곳
	temp->link = ptr2;

	return ptr1;

}

void show_list(list_pointer head) {

	list_pointer p = head;

	while (p) {

		printf("%d%s", p->data, p->link ? "->" : "\n");

		p = p->link;

	}

}

void main() {

	list_pointer list = make_list(5);//리스트 헤더 5개의 원소가 있는 포인터 반환

	show_list(list);

	list = invert(list);

	show_list(list);

	list_pointer list1 = make_list(5);

	list_pointer list2 = make_list(5);//

	printf("list1 : ");

	show_list(list1);

	printf("list2 : ");

	show_list(list2);

	printf("concat : ");

	show_list(concatenate(list1, list2));

}
