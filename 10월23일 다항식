#define _CRT_SECURE_NO_WARNINGS
//다항식을 배열로 사용
//구조체배열 
#include <stdio.h>
#include <stdlib.h>
#define COMPARE(x,y) (((x) < (y)) ? -1: ((x) == (y)) ? 0 : 1)
#define MAX_TERMS 100//베열의 크기

typedef struct {
    float coef;
    int expon;
} polynomial;//정의하고있다

polynomial terms[MAX_TERMS];//terms라는 배열을 만든다.terms에 하나의 다항식만 들어가는게 아님(합한 것도 terms로 표현)
int avail = 0;//0으로 설정...?
void attach(float coefficient, int exponent);//항을 붙인다.
void padd(int startA, int finishA, int startB, int finishB, int* startD, int* finishD);//?못들음

void main() {//while로 가능 탈출 조건은 예를 들면 -100을 입력하면 탈출 등으로
    int startA = 0; int finishA = 0;
    int startB = 0; int finishB = 0;
    int startD = 0; int finishD = 0;//최초는 다 0

    attach(3, 1000);    attach(1, 1); //앞은 계수, 뒤는 지수
    finishA = avail - 1;//avail이전

    startB = avail;
    attach(3, 9);  attach(2, 4);   attach(10, 3);  attach(3, 2);   attach(1, 0);//항 4개를 넣어줌(내가 실습하면서 1개 더 추가함)
    finishB = avail - 1;

    startD = avail;//결정되지 않음
    finishD = -1;

    padd(startA, finishA, startB, finishB, &startD, &finishD);//주소값을 들고감(&) d만 변할 수 있음
    for (int i = startD; i <= finishD; i++) {
        // printf("coef = [%.0f]\texpon = [%d]\n", terms[i].coef,terms[i].expon);
        printf("%.0fx^%d + ", terms[i].coef, terms[i].expon);
    }
}

void attach(float coefficient, int exponent) {
    // 다항식에 새로운 항을 추가하는 함수
    if (avail >= MAX_TERMS) {
        fprintf(stderr, "Too many terms in the polynomial \n.");
        exit(1);
    }
    terms[avail].coef = coefficient;//구조체 배열 접근 방법
    terms[avail++].expon = exponent;// avail은 여기서 종결. 후위 증감
}

void padd(int startA, int finishA, int startB, int finishB, int* startD, int* finishD) {
    float coefficient;
    *startD = avail;//초기화
    while (startA <= finishA && startB <= finishB) {//a가 변할 수 있음.
        switch (COMPARE(terms[startA].expon, terms[startB].expon)) {//선택문
        case -1://뒤가 큼(b의 지수가 큼)
            attach(terms[startB].coef, terms[startB].expon);
            startB++; break;
        case 0:
            coefficient = terms[startA].coef + terms[startB].coef;//두 개를 더하라
            if (coefficient) attach(coefficient, terms[startA].expon);
            startA++; startB++; break;
        case 1://a가의 지수가 큼
            attach(terms[startA].coef, terms[startA].expon);
            startA++;
            break;
        }
    }
    for (; startA <= finishA; startA++)//어느순간 스타트a나 스타트b가 피니쉬를 넘는 경우 발생->while 탈출 
        attach(terms[startA].coef, terms[startA].expon);
    for (; startB <= finishB; startB++) //이미 스타트가 피니쉬보다 큼=동작안함
        attach(terms[startB].coef, terms[startB].expon);
    *finishD = avail - 1;
}
