#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

#define SWAP(x, y, t) ((t) = (x), (x) = (y), (y) = (t))

#define MAX_SIZE 10001

void sel_sort_inc(int list[], int n); // 오름차순
void sel_sort_dec(int list[], int n); // 내림차순

void main() {

 int i, n, list[MAX_SIZE];
 int marking_list[1001] = { 0, };

 srand(time(NULL));

 printf("Enter the number of numbers to generate: ");
 scanf("%d", &n);

 if (n < 1 || n > MAX_SIZE) {
 fprintf(stderr, "Improper value of n\n");
 exit(1);
 }

 For (i = 0; i < n; i++) { // generating n integers randomly
 list[i] = rand() % 1000;
 if (!marking_list[list[i] - 1]) {
 marking_list[list[i] - 1] = 1;
 printf("%d", list[i]); // generated random number output
 }
 else {
 i--; // Recreate random number in case of duplication
 }
 }

 printf("\n");

 // Run in descending order
 sel_sort_dec(list, n);

 printf("\nSorted array in descending order:\n");
 for (i = 0; i < n; i++) // Outputs an ordered integer
 printf("%d ", list[i]);

 printf("\n");
}

// Sort in descending order
void sel_sort_dec(int list[], int n) {
 int base = 0, target = 0, max = 0, temp = 0;

 for (base = 0; base < n - 1; base++) {
 max = base; 

 for (target = base + 1; target < n; target++)
 if (list[target] > list[max]) 
 max = target;

 SWAP(list[base], list[max], temp); 
 }
}
